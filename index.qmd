---
title: "R Programming for Biologists"
format:
  html: default
---

## Course Description

Computer literacy is increasingly critical to all aspects of the world in which we live. Data science is the branch of this skillset that sits in the middle of the Venn diagram between computers and some other subject area. Regardless of your academic specialty, fundamental data science skills data are both extremely useful and highly sought after in virtually all career paths. This course aims to give you a primer on data management best practices, analytical processes, and reproducible code. There will also be an opportunity to practice communication of technical concepts to a non-specialist audience.

This course is relatively new so I will really appreciate your feedback and participation as we learn together! As such, I may need to adjust the scheduling of various topics (see the schedule for more information), but you will be notified of any changes sufficiently far in advance that you can prepare.

I would also like to acknowledge that this course has taken place on Wôpanâak (Wampanoag), Massa-adchu-es-et (Massachusett), and Pokanoket land. For more information, please visit [www.native-land.ca](https://native-land.ca/)

## Citing These Materials

I hope these materials are useful beyond the scope of me offering the course and encourage you to use these elsewhere! If you do so, please use the following citation:

> Lyon, N.J. (2025). Programming in R for Biologists. Zenodo. [doi.org/10.5281/zenodo.17201332](https://doi.org/10.5281/zenodo.17201332)

## Learning Objectives

Upon completion of this course, students will be able to:

- **Understand** the principles of well-structured data and reproducible coding
- **Write** short computer programs (called "scripts") in R
- **Explore** data through wrangling and visualization techniques
- **Automate** data processes using loops and conditionals
- **Apply** general data science concepts to new datasets
- **Create** a professional online presence on GitHub (www.github.com)
- **Evaluate** peers' work and offer both useful positive and constructively critical feedback

## Course Structure

| Class Type |   Duration   |
|:----------:|:------------:|
|  Lecture   | 1 hr 15 min  |
|    Lab     | 2 hrs 20 min |

## Required Course Materials

1.  R ([cran.r-project.org](https://www.cran.r-project.org/))

I recognize that this website is very bare bones, but this program is the industry standard and enjoys the support of a large and active population of users. When you are troubleshooting (i.e., "debugging") your code you will very much appreciate the breadth of people who are also using R. Follow the "Download R for ..." link for your computer operating system (i.e., Mac vs. Windows vs. Linux) to install R.

2.  RStudio Desktop ([posit.co/downloads](https://www.posit.co/downloads))

RStudio is the preferred platform for working in R; as the R website showed, so-called "base R" can be a little basic. RStudio will provide several helpful bells and whistles that will make the program easier to work with and easier on the eyes!

3.  Git & GitHub

Git (an application like R) and GitHub (a website) will be a part of the course, but you do not need to do anything with them before we cover them in class! Installing Git can be a little annoying for those without command line (a.k.a. "terminal", "shell", or "bash") experience. We'll cover working with Git and GitHub together a few weeks into the course. If you feel so moved, you are welcome to try to install Git (see instructions [here](https://happygitwithr.com/install-git)) and make a profile on GitHub on your own, but doing it alone is *optional* so don't worry if you can't get it to work before we cover it in class!

4.  Miscellaneous peer-reviewed articles / book excerpts

I will provide any readings for the course in PDF format, so check the Canvas/etc. page regularly to download the necessary files. Any required readings will be posted at least one week before we discuss it in class. I'll also do my best to link directly to the readings from this website!

## How to Succeed

I am committed to being a partner in your success in this course, and in the spirit of that I have the following tips for success:

1.  Come to office hours / email me
    -   I will be readily available via office hours and informally whenever my office door is open
    -   I am also happy to just chat with you about fun course-adjacent things, so don't feel like you need to be struggling with the course to stop by
2.  Check the Canvas page and your university email regularly
    -   Messages to the class/assignments/grades will be posted there
    -   Check every so often so that no assignments / deadlines sneak up on you
3.  Build "muscle memory"
    -   I will do my utmost to make this course accessible and fun, but programming is fundamentally a new language, so you'll need to practice to "speak" it confidently
    -   I recommend playing with the concepts and code from class outside of class so that you can build fluency that will last beyond the scope of this course
    -   Try to convince a peer to let you teach them some topic we covered in class; teaching something is one of the best ways to truly understand that topic!
4.  Give me feedback on where I can improve/change my teaching style to benefit you
    -   I will give an anonymous mid-term evaluation so that I can be most effective for what you need to excel
    -   I will also welcome informal feedback if you are comfortable sharing

